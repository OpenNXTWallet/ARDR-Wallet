package com.jelurida.ardor.contracts;

import nxt.addons.JO;
import nxt.http.callers.SetAccountPropertyCall;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class ForgingRewardTest extends AbstractContractTest {

    @Test
    public void forgingReward() {
        JO setupParams = new JO();
        setupParams.put("interval", 5);
        setupParams.put("rewardNxt", "false");
        ContractTestHelper.deployContract(ForgingReward.class.getSimpleName(), setupParams, false);
        ContractTestHelper.deployContract(DistributedRandomNumberGenerator.class.getSimpleName());
        generateBlock(RIKER);
        generateBlock(FORGY);
        generateBlock(RIKER); // Reward is submitted now (genesis block generated by RIKER and block 1 by FORGY when deploying the contract
        generateBlock(FORGY); // This block includes the reward (already counted toward next reward)

        // Check that a reward transaction was submitted
        List<Long> recipients = new ArrayList<>(Arrays.asList(RIKER.getId(), FORGY.getId()));
        ContractTestHelper.testChildTransaction(2, 0, 0, 498000000, 2000000, ALICE.getAccount().getId(), recipients);

        // Riker gives up on the reward
        SetAccountPropertyCall.create(2).property("NoForgingReward").secretPhrase(RIKER.getSecretPhrase()).feeNQT(100000000).call();
        generateBlock(RIKER);
        generateBlock(RIKER);
        generateBlock(RIKER);
        generateBlock(RIKER); // Reward is submitted now
        generateBlock(RIKER); // This block includes the reward

        // Check that a reward transaction was submitted
        ContractTestHelper.testChildTransaction(2, 0, 0, 498000000, 2000000, ALICE.getAccount().getId(), Collections.singletonList(FORGY.getId()));
    }

}
