################################################################################
# Copyright © 2013-2016 The Nxt Core Developers.                               #
# Copyright © 2016-2018 Jelurida IP B.V.                                       #
#                                                                              #
# See the LICENSE.txt file at the top-level directory of this distribution     #
# for licensing information.                                                   #
#                                                                              #
# Unless otherwise agreed in a custom licensing agreement with Jelurida B.V.,  #
# no part of this software, including this file, may be copied, modified,      #
# propagated, or distributed except according to the terms contained in the    #
# LICENSE.txt file.                                                            #
#                                                                              #
# Removal or modification of this copyright notice is prohibited.              #
#                                                                              #
################################################################################

# Do not modify this file. Instead, create a nxt.properties file with only the
# properties you need to change, and set them there. The values in 
# nxt.properties override those in nxt-default.properties.


#### PERMISSIONED BLOCKCHAIN ####

# Indicate this is a permissioned blockchain (requires additional support)
nxt.isPermissioned=false

# Authentication credentials secret phrase (Nxt account must have WRITER role)
nxt.credentials.secretPhrase=


#### PEER NETWORKING ####

# Announce my IP address/hostname to peers and allow them to share it with other
# peers.  Incoming connections will not be allowed if this is set to false.
nxt.shareMyAddress=true

# Port for incoming peer to peer networking requests.
nxt.peerServerPort=27874

# Peer connect timeout (seconds)
nxt.peerConnectTimeout=10

# Peer read timeout (seconds)
nxt.peerReadTimeout=20

# Enable UPnP for the peer port.
nxt.enablePeerUPnP=true

# UPnP gateway http read timeout, milliseconds. Set to -1 to disable.
# Default 7000 if not set.
nxt.upnpGatewayTimeout=7000

# UPnP gateway socket connection timeout, milliseconds. Set to -1 to disable.
# Default 3000 if not set.
nxt.upnpDiscoverTimeout=3000

# Host interface on which to listen for peer networking requests, default all.
# Use 0.0.0.0 to listen on all interfaces, including IPv6.
nxt.peerServerHost=0.0.0.0

# My externally visible IP address or host name, to be announced to peers.
# It can optionally include a port number, which will also be announced to
# peers, and may be different from nxt.peerServerPort (useful if you do port
# forwarding behind a router).  Peers will use the external connection address 
# if nxt.myAddress is not specified and nxt.shareMyAddress is set to true.
nxt.myAddress=

# My platform, to be announced to peers.
nxt.myPlatform=

# Default initial peers. Only used if nxt.usePeersDb=true.
# Do not modify. Add custom peers to nxt.wellKnownPeers instead.
nxt.defaultPeers=father.vervebrio.com; zuqka.duckdns.org; 51.38.82.75; \
  193.151.106.129; 66.70.196.204; 176.31.105.109; ardr.nodes.mycrypto.space; \
  174.54.211.57; nxt.thewiring.com; 92.23.184.2; 212.237.98.178; \
  122.227.194.141; 87.123.115.189; 80.211.167.215; ardor.noip.me; \
  24.150.90.24; 109.195.179.12; 88.99.225.142; 89.253.143.105; \
  ardor.jelurida.com; 70.113.35.228; 94.177.175.166; 54.37.222.185; \
  138.197.106.19; ardor.nxter.org; 77.217.119.242; byteball.me; \
  188.166.37.129; 80.211.208.169; 188.166.27.111; 92.109.96.178; \
  61.255.218.60; 93.123.80.47; 162.243.242.8; 213.226.169.57; \
  bitswift.network; 42.191.63.129; zuqka1.duckdns.org; 93.72.92.223; \
  202.129.207.51; 70.122.97.5; 80.211.129.144; 39.109.206.215; 86.15.11.250; \
  185.44.105.36; 71.175.46.144; ardor01.adapp.tech; 5.129.88.102; \
  92.227.73.49; 212.186.184.152; 213.0.25.185; 188.166.164.204; \
  77.181.254.252; 108.61.209.72; 77.70.80.46; 181.220.228.85; 178.209.194.4; \
  ardor.stratehm.fr; 94.214.92.173; 174.48.81.154; 73.202.51.151; \
  208.94.38.216; 68.132.119.38; 67.87.76.202; 80.218.160.90; ardor2.y.cz; \
  84.104.26.31; bargu.szn.dk; 35.185.248.38; 108.161.166.82; 37.187.108.114; \
  62.195.14.95; 83.162.253.185; 184.58.231.39; 163.172.68.112; 70.50.245.111; \
  172.245.181.157; 62.227.214.47; 90.39.31.84; 92.222.87.172; \
  enricoip.no-ip.biz; v0174.4smart.eu:37503; blackbytes.me; 220.134.112.220; \
  71.58.253.106; 121.42.151.73; ardor2.chain.garden; 82.57.180.118; \
  76.176.154.153; 188.235.1.88; 164.132.45.10; 109.167.144.141; 173.50.127.90; \
  73.170.163.6; ardorpeer.duckdns.org; 185.86.151.145; 95.174.246.245; \
  wohnung.tzo.com; 80.114.23.144; 78.205.199.21; 120.79.114.103; \
  212.21.12.248; 67.71.99.109; 144.76.170.210; ardor3.chain.garden; \
  119.28.20.120; 103.250.83.127; 47.96.163.83; 50.89.226.22; 216.170.122.9; \
  198.58.112.156; 173.255.141.23; 70.67.201.5; ardor.crypto-nodes.net; \
  ardor.legel.io; 72.74.76.166; 213.242.255.93; 185.181.100.182; \
  36.248.61.251; 98.220.173.22; v22017074781651445.quicksrv.de; 79.72.161.145; \
  78.56.50.104; 52.169.79.172; 94.36.67.105; ardor3.y.cz; 87.222.27.197; \
  23.94.189.88; 38.87.54.163; 73.247.177.234; 163.172.146.55; 80.211.13.113; \
  ardorx.ru; crypto.rapidant.com; nxt.miasik.tk; 88.153.192.220; \
  ardor.bamdwurn.tk; 24.132.176.87; 73.114.141.192; 163.172.166.207; \
  66.135.187.169; zdani.szn.dk; 51.15.56.127; 92.249.89.44; 139.162.166.144; \
  140.143.234.86; 94.45.222.203; 185.170.113.79; 37.17.232.101; 76.169.96.39;

# A list of well known peer addresses / host names, separated by '; '. These
# peers are always selected first when creating outbound connections.
nxt.wellKnownPeers=

# Known bad peers to be blacklisted.  Outbound connections will not be created
# and inbound connections will not be accepted.
nxt.knownBlacklistedPeers=

# Default initial peers used for testnet only. Only used if nxt.usePeersDb=true.
# Do not modify. Add custom testnet peers to nxt.testnetPeers instead.
nxt.defaultTestnetPeers=testlight01.jelurida.com; testlight02.jelurida.com; \
  testlight03.jelurida.com; 85.11.147.38; 80.71.57.20; 164.132.99.1; \
  66.42.73.115; 51.38.82.75; petko.ddns.net; 95.183.48.211; 54.39.17.89; \
  13.250.91.16; 198.105.223.72; 107.150.3.13; 94.177.197.210; ardor.noip.me; \
  155.33.133.46; enricoip.no-ip.biz; 38.87.54.163; 107.170.3.62; 5.200.23.15; \
  testardor.jelurida.com;

# Well known testnet peers.  These peers are always selected first when creating
# outbound connections.
nxt.testnetPeers=

# Maximum number of inbound connections.
nxt.maxNumberOfInboundConnections=2000

# Maximum number of outbound connections.
nxt.maxNumberOfOutboundConnections=8

# Stop adding new peers when number of known peers exceeds that many.
# This value must be at least 100.
nxt.maxNumberOfKnownPeers=2000

# Stop removing old peers when number of known peers drops below that many.
# This value must be at least 100 and cannot be exceed nxt.maxNumberOfKnownPeers.
nxt.minNumberOfKnownPeers=1000

# Blacklist period (seconds)
nxt.blacklistingPeriod=600

# Use testnet, leave set to false unless you are really testing.
# Never unlock your real accounts on testnet! Use separate accounts for testing
# only.
# When using testnet, all custom port settings will be ignored,
# and hardcoded ports of 26874 (peer networking), 26876 (API)
# and 26877 (SSL API) will be used.
nxt.isTestnet=false

# Set to true when automated test is being executed. Tests code is in the
# "test" directory
nxt.isAutomatedTest=false

# Save known peers in the database
nxt.savePeers=true

# Set to false to disable use of the peers database and the default initial
# peers. This will not delete saved peers.
nxt.usePeersDb=true

# Set to false to disable getting more peers from the currently connected peers.
# Only useful when debugging and want to limit the peers to those in peersDb or
# wellKnownPeers.
nxt.getMorePeers=true

# Set to true to run offline - do not connect to peers and do not listen for
# incoming peer connections. This is equivalent to setting
# nxt.shareMyAddress=false, nxt.wellKnownPeers=, nxt.testnetPeers= 
# and nxt.usePeersDb=false, and if set to true overrides those properties.
nxt.isOffline=false

# Ignore peer announced addresses. Do not change unless you understand what it
# does.
nxt.ignorePeerAnnouncedAddress=false

# Do not include exception details when returning error response to peers.
nxt.hideErrorDetails=false

# Do not accept a bundler rate for an account with an effective balance
# less than the minimum
nxt.minBundlerBalanceFXT=1000

# Do not accept a bundler rate for a bundler with a current fee limit
# less than the minimum
nxt.minBundlerFeeLimitFXT=10

# Blacklisted bundler accounts
nxt.blacklistedBundlerAccounts=

# List of accounts whose bundling rate is considered when calculating the best
# bundler rates. If empty, rates from all accounts are used (no filtering is done)
nxt.bestBundlerRateWhitelist=


#### API SERVER ####

# Accept http/json API requests.
nxt.enableAPIServer=true

# Hosts from which to allow http/json API requests, if enabled. Set to * to
# allow all. Can also specify networks in CIDR notation, e.g. 192.168.1.0/24.
nxt.allowedBotHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];

# Port for http/json API requests.
nxt.apiServerPort=27876

# Port for https/json API request. If same as nxt.apiServerPort, the nxt.apiSSL
# setting determines whether SSL is used or not.
nxt.apiServerSSLPort=27876

# Enable UPnP for the API ports.
nxt.enableAPIUPnP=false

# Host interface on which to listen for http/json API request, default localhost
# only. Set to 0.0.0.0 to allow the API server to accept requests from all
# network interfaces, including IPv6.
nxt.apiServerHost=127.0.0.1

# Idle timeout for http/json API request connections, milliseconds.
nxt.apiServerIdleTimeout=30000

# Directory with html and javascript files for the new client UI, and admin
# tools utilizing the http/json API.
nxt.apiResourceBase=./html/www

# Default page for the API server.
nxt.apiWelcomeFile=index.html

# Java API documentation directory, optional.
nxt.javadocResourceBase=./html/doc

# Enable Cross Origin Filter for the API server.
nxt.apiServerCORS=true

# Add X-Frame-Options SAMEORIGIN header to every response as a protection
# against clickjacking.
nxt.apiFrameOptionsSameOrigin=true

# Enable SSL for the API server (also need to set nxt.keyStorePath and
# nxt.keyStorePassword).
# Non-SSL connections will be disabled if nxt.apiServerSSLPort is equal to
# nxt.apiServerPort.
# Otherwise, both SSL and non-SSL connections will be accepted.
nxt.apiSSL=false

# Enabled cipher suites for the API server when SSL is enabled. The list below
# is an example to use for choosing AES-GCM instead of AES-CBC, not the default.
#nxt.apiSSLCiphers=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384; \
#  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256; \
#  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384; \
#  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256;

# Enforce requests that require POST to only be accepted when submitted as POST.
nxt.apiServerEnforcePOST=true

# Compress Http responses for the API server. If not set, enabled for openAPI
# nodes only.
#nxt.enableAPIServerGZIPFilter=false

# Password that should be provided when executing protected (administrative) API
# requests.
# Please choose a decent password here. Preferably, use a password generator.
# Password protection is disabled and password is not needed when the API server
# only listens on the localhost interface, i.e. when 
# nxt.apiServerHost=127.0.0.1.
nxt.adminPassword=

# Set to true to disable the password protection for admin API requests even
# when API server is publicly accessible. Not recommended.
nxt.disableAdminPassword=false

# The maximum number of records possible to retrieve with a single request. This
# restriction is not enforced if the admin password is provided, or is not
# needed (disabled or listening on localhost only).
nxt.maxAPIRecords=100

# API event registration timeout (seconds). The timeout is reset each time an
# event wait request is received from the application. The minimum value is 15
# seconds.
nxt.apiEventTimeout=300

# Maximum number of applications with active event registrations.
nxt.apiMaxEventUsers=32

# Maximum number of event registrations for a single user (IP address)
nxt.apiMaxUserEventRegistrations=2

# Maximum file size accepted for upload, in bytes. Default and minimum value
# accepted is 43008 (42 kbytes).
#nxt.maxUploadFileSize=0

# If an unsigned transaction is submitted with insufficient fee, set the fee to
# the minimum fee calculated for this transaction instead, as if feeNQT=0 has
# been specified. Default is false.
nxt.correctInvalidFees=false

# APIs to disable, as a semicolon separated list.
nxt.disabledAPIs=

# Groups of APIs to disable, as a semicolon separated list of API tag names.
nxt.disabledAPITags=

# Enables the API proxy. Requests are forwarded to a randomly chosen peer
# providing openAPI service. Outgoing transactions are signed locally - the
# secret phrase is never sent to the remote peer.
# Used by light clients or when the blockchain is not yet downloaded.
# For openAPI nodes, the API proxy remains disabled, ignoring this setting.
# For light clients, the API proxy is always enabled, ignoring this setting.
nxt.enableAPIProxy=true

# Operate as light client. Blockchain is not downloaded and processed, instead
# the API proxy is used (see nxt.enableAPIProxy).
# Light clients are not advertised as providing openAPI service even if they do
# have their API publicly accessible.
nxt.isLightClient=false

# If set, all requests will be forwarded to the specified openAPI peer
nxt.forceAPIProxyServerURL=

# The period remote API servers are blacklisted when not functioning (in
# milliseconds).
# The API proxy blacklisting mechanism is in addition to the peers blacklisting
# - if a peer is blacklisted, it won't be used by the proxy, but it is possible
# that a peer is online and correctly functioning, and only its open API is
# blocked (e.g. by firewall)
nxt.apiProxyBlacklistingPeriod=1800000

# When the API server is running behind a proxy, use this header to obtain the
# remote host for which the API request was forwarded. Currently only used for
# keeping track of and blacklisting hosts that try to brute force the API admin
# password.
#nxt.forwardedForHeader=X-Forwarded-For

# Fixes the Content-Type header of the API responses to be application/json
# instead of text/plain. Default is text/plain for compatibility reasons.
nxt.apiFixResponseContentType=false

#### DEBUGGING ####

# Include caller traceback in log messages.
nxt.enableLogTraceback=false

# Enable logging of exception stack traces.
nxt.enableStackTraces=true

# Track balances of the following accounts and related events for debugging
# purposes.
nxt.debugTraceAccounts=

# File name for logging tracked account balances.
nxt.debugTraceLog=nxt-trace.csv

# Separator character for trace log.
nxt.debugTraceSeparator=\t

# Quote character for trace log.
nxt.debugTraceQuote="

# Log changes to unconfirmed balances.
nxt.debugLogUnconfirmed=false

# Peer communication logging bit flags (1=log message names, 2=log message details)
nxt.communicationLogging=0



#### DATABASE ####

# Database connection JDBC url, see the H2 documentation for possible
# customizations.
# Append ;AUTO_SERVER=TRUE to enable automatic mixed mode access.
# The nxt_db folder is expected to be in the current working directory, will be
# created if missing.
# nxt.dbUrl=jdbc:h2:./nxt_db/nxt;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

# Database connection JDBC url to use with the test network, if isTestnet=true.
# nxt.testDbUrl=jdbc:h2:./nxt_test_db/nxt;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

nxt.dbType=h2
nxt.testDbType=h2

nxt.dbDir=./nxt_db/nxt
nxt.testDbDir=./nxt_test_db/nxt

nxt.dbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE
nxt.testDbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

nxt.dbUsername=sa
nxt.testDbUsername=sa

nxt.dbPassword=sa
nxt.testDbPassword=sa

# Database connection timeout in seconds.
nxt.dbLoginTimeout=70

# Database default lock timeout in seconds.
nxt.dbDefaultLockTimeout=60

# Database max memory rows limit.
nxt.dbMaxMemoryRows=1000000

# Maximum simultaneous database connections.
nxt.maxDbConnections=30

# The memory allocated to database cache, in kB.
# If set to 0, the cache size varies from a minimum of 16MB for heap sizes 160MB
# or less, to a maximum of 256MB for heap sizes 640MB or higher.
nxt.dbCacheKB=0

# Enable trimming of derived objects tables. Disabling this will significantly
# worsen performance.
nxt.trimDerivedTables=true

# If trimming is enabled, maintain enough previous height records to allow
# rollback of at least that many blocks. Cannot be set to less than 720.
# After increasing this value, a full re-scan also needs to be done in order for
# the previously trimmed records to be re-created and preserved.
nxt.maxRollback=800

# When trimming is enabled, it is run every nxt.trimFrequency blocks.
nxt.trimFrequency=1000

# Override the lifetime of prunable data to keep them longer, value in seconds.
# Set to -1 to disable pruning. Has no effect if set to less then the minimum
# required lifetime of two weeks (1209600 seconds) on mainnet, or 24 hours
# (86400 seconds) on testnet. Default is 90 days.
nxt.maxPrunableLifetime=7776000

# Include expired prunable parts if requested as long as it is still available.
# In order to provide the PRUNABLE peer service, nxt.maxPrunableLifetime must
# be -1 and nxt.includeExpiredPrunable must be true.  The PRUNABLE service means
# the peer will provide expired prunable data to other peers when requested.
nxt.includeExpiredPrunable=true

# Threshold for logging database statements (milliseconds).
nxt.statementLogThreshold=10000

# Threshold for logging database transactions (milliseconds).
nxt.transactionLogThreshold=15000

# Log the average transaction time after this many minutes.
nxt.transactionLogInterval=15

# Public keys are by default cached, which consumes 10-15 MB of memory.
nxt.enablePublicKeyCache=true

# When trimming or pruning derived tables, do a commit after that many records
# are processed. Default if not set is Integer.MAX_VALUE which prevents such
# intermediate commits.
nxt.batchCommitSize=100



#### Blocks and transactions ####

# Delay generation of next block in order to accumulate more transactions in it.
# Cannot be more than 14 s, as transactions are allowed at most 15 s timestamp
# difference from the block they can be included in.
nxt.forgingDelay=10

# Generate and submit the next block before its hit time in response to
# receiving a lower difficulty block. Submitting the block more than 15 s before
# its time however will lead to its rejection.
nxt.forgingSpeedup=3

# Maximum number of forging accounts allowed on this node.
nxt.maxNumberOfForgers=100

# Verify batches of blocks downloaded from a single peer with that many other
# peers.
nxt.numberOfForkConfirmations=5
nxt.testnetNumberOfForkConfirmations=2

# Enable re-broadcasting of new transactions until they are received back from
# at least one peer, or found in the blockchain. This feature can optionally be
# disabled, to avoid the risk of revealing that this node is the submitter of
# such re-broadcasted new transactions.
nxt.enableTransactionRebroadcasting=true

# Do not allow the number of unconfirmed transactions in memory to exceed this
# value. If exceeded, the same transaction ordering as when choosing which
# transactions to include in a forged block is used to decide which to keep in
# the unconfirmed pool.
# Set to 0 or negative for no limit.
nxt.maxUnconfirmedTransactions=2000

# Maximum number of account monitors allowed on this node
nxt.maxNumberOfMonitors=100

# Default deadline for ChildBlockFxtTransactions created by bundlers running
# on this node, in minutes. Max allowed is 15 minutes.
nxt.defaultChildBlockDeadline=10

# When running Bundlers, only bundle transactions that satisfy this filter.
# Filter class must implement the nxt.blockchain.Bundler.Filter interface, see
# nxt.addons.PersonalBundler for an example.
# Deprecated. Use nxt.availableBundlingFilters and provide the name of the
# filter when starting the bundler. If this property is set, the filter
# will be enforced to all bundling rules
#nxt.bundlingFilter=nxt.addons.PersonalBundler

# Filters that can be used in bundling rules when starting a bundler.
# Filter class must implement the nxt.blockchain.Bundler.Filter interface
nxt.availableBundlingFilters=nxt.addons.PersonalBundler;nxt.addons.AccountPropertyBundler; \
  nxt.addons.AssetBundler;nxt.addons.CurrencyBundler;nxt.addons.PurchaseBundler; \
  nxt.addons.QuotaBundler

# Custom bundling fee calculators. Allows customization of fee calculation.
# Classes must implement nxt.blockchain.Bundler.FeeCalculator
nxt.customBundlingFeeCalculators=



#### DESKTOP WALLET ####

# Set to "desktop" to work in desktop mode, in desktop mode, the wallet opens 
# automatically while settings, log files, and blockchain data files are 
# stored in the user folders instead of in the installation folder
nxt.runtime.mode=

# When using desktop mode and when user interface is available. Launch the
# wallet inside a desktop frame when the node is started.
nxt.launchDesktopApplication=true

# The default account is used, to automatically login to the wallet during
# startup.
nxt.defaultDesktopAccount=



#### ACCOUNT LEDGER ####

# Address of accounts (in RS format) to track balance changes in the ledger
# table, separated by ';'.
# Set to * to track changes for all accounts. Specify no accounts to disable
# the account ledger.
nxt.ledgerAccounts=*

# Specify 0 to not log unconfirmed changes, 1 to log unconfirmed changes or 2 to
# log only unconfirmed changes.
nxt.ledgerLogUnconfirmed=2

# Specify the number of blocks to keep when trimming the account ledger table.
# A value of zero will cause all blocks to be kept.
nxt.ledgerTrimKeep=30000



#### VOTING SYSTEM ####

# If disabled, polls are not processed at finish height and results are not
# stored in the database. When requested, poll results will be calculated
# on-the-fly, if the votes are still available.
nxt.processPolls=true



#### MINT ####

# Address of the NXT server to which the mint worker submits its transactions
# (default: localhost).
nxt.mint.serverAddress=

# Use Https when connecting to the server. Note that mint worker accepts any SSL
# certificate as valid, without checking hostname or certificate authority,
# therefore this will not protect you against a man-in-the-middle attack when
# submitting mint transactions.
nxt.mint.useHttps=false

# Specify a mintable currency code.
nxt.mint.currencyCode=

# Secret phrase for the minting account, this secret phrase is sent to the host
# specified by nxt.mint.serverAddress therefore do not specify secret phrase of
# an account with lots of funds.
nxt.mint.secretPhrase=

# Number of units to mint per transaction.
# The minting difficulty grows linearly with the number of units per mint.
nxt.mint.unitsPerMint=1

# The initial nonce used for minting.
# Set to 0 to start with a random nonce.
nxt.mint.initialNonce=0

# Number of concurrency threads used for minting.
# Set to 0 allocate one thread per processor core.
nxt.mint.threadPoolSize=0

# When set to false mint transactions are not submitted when a hash is solved.
# Set this value to true to perform actual minting.
nxt.mint.isSubmitted=false

# When set to false the mint worker will resume operation even in case a mint
# transaction has returned an error response.
nxt.mint.stopOnError=false

# ChildChain on which mint transactions are submitted.
nxt.mint.chain=IGNIS

# Transaction fee for mint transaction, in NQT.
nxt.mint.feeNQT=100000000



#### CONTRACT MANAGER ####

# Name of the contract manager configuration file.
# Use this configuration file to configure contract specific setup.
# File loading is attempted from classpath then from user folder then
# installation folder.
contract.manager.uploadParamsFile=contract.uploader.json

# Address of the server to which the contract manager submits its transactions
# (default: localhost).
contract.manager.serverAddress=localhost

# Use Https when connecting to the server. Note that contract.manager accepts any SSL
# certificate as valid, without checking hostname or certificate authority,
# therefore this will not protect you against a man-in-the-middle attack when
# uploading contracts to a remote node.
contract.manager.useHttps=false

# Secret phrase for the contract.manager account, this secret phrase is not sent to the host
# specified by contract.manager.serverAddress.
contract.manager.secretPhrase=

# Fee calculation is based on the following factors
# If feeNQT is specified it is used as the child chain fee.
# Else if feeRateNQTPerFXT is specified, we calculates the fee by multiplying the
# feeRateNQTPerFXT by the minimum parent chain fee required.
# Else we query the existing bundlers which are still willing to pay at least
# minBundlerBalanceFXT to find the best feeRateNQTPerFXT rate. This is also the 
# default behavior in case no setting is specified.
contract.manager.feeNQT=
contract.manager.feeRateNQTPerFXT=
contract.manager.minBundlerBalanceFXT=



#### Passphrase Recovery Utility ####

# Specify the approximate passphrase that you remember
# recoveryWildcard=hope peac* happen *ouch easy pretend worthless talk them indeed wheel state

# Specify the positions inside the passphrase in which you like to try various options
# The first character position is 1
# recoveryPositions=10,19

# Specify the possible values to use for replacing the unknown positions, unicode characters
# can be specified using the \u notation
# recoveryDictionary=t\u2019ne



#### Shuffling ####

# Delete finished shufflings and their participants. When enabled, records of
# completed shufflings and their participants are deleted after the shuffling
# has finished, which will improve performance by keeping their tables smaller.
nxt.deleteFinishedShufflings=false

# Use strong secure random implementation. As this can block on unix systems,
# it is disabled by default. Enable only if using haveged or other entropy
# source that makes reading from /dev/random fast, otherwise server-side
# encryption will be unusably slow and cause coin shufflings to fail.
nxt.useStrongSecureRandom=false

# Maximum number of shufflers allowed to run at the same time on this node.
nxt.maxNumberOfShufflers=100



#### JETTY ####

# keystore file and password, required if uiSSL or apiSSL are enabled.
nxt.keyStorePath=keystore
nxt.keyStorePassword=password

# keystore type defaults to JKS can be changed to PKCS12.
nxt.keyStoreType=JKS



#### Developers only ####

# Force re-validation of blocks and transaction at start.
nxt.forceValidate=false

# Force re-build of derived objects tables at start.
nxt.forceScan=false

# Scale epoch time for faster forging. Only works when offline.
# nxt.timeMultiplier=1

# Enable the following AddOns, which must also be on the classpath, e.g. placed
# in the addons/classes or addons/lib directory. List of class names, separated
# by semicolon.
#nxt.addOns=nxt.addons.Demo; nxt.addons.AfterStart; nxt.addons.BeforeShutdown

# Demo after start and before shutdown scripts
#nxt.afterStartScript=../bin/afterStart.sh
#nxt.beforeShutdownScript=../bin/beforeShutdown.sh

# NRS normally sets a customized security policy when AddOns are used.
# Set to true to use the default security manager when AddOns are used.
nxt.disableSecurityPolicy=false

# Display a custom warning text on the login screen in the client UI.
#nxt.customLoginWarning=

# NRS version.
nxt.version=2.1.2

